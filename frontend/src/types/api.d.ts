/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/auth/backlog/authorize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Authorization Url
         * @description Backlog OAuth2.0認証URLを生成します
         *
         *     このエンドポイントは、ユーザーをBacklogの認証ページにリダイレクトするための
         *     URLを生成します。CSRF攻撃を防ぐため、stateパラメータも生成して保存します。
         *
         *     Args:
         *         space_key: BacklogのスペースキーOptional）環境変数がデフォルト
         *
         *     Returns:
         *         認証URLとstateを含むレスポンス
         */
        get: operations["get_authorization_url_api_v1_auth_backlog_authorize_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/backlog/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Handle Callback
         * @description Backlog OAuth2.0認証のコールバックを処理します
         *
         *     Backlogから認証コードを受け取り、アクセストークンに交換します。
         *     また、CSRF攻撃を防ぐためstateパラメータを検証します。
         *
         *     Args:
         *         request: 認証コードとstateを含むリクエスト
         *         db: データベースセッション
         *         auth_service: 認証サービス
         *
         *     Returns:
         *         アクセストークンとユーザー情報を含むレスポンス
         *
         *     Raises:
         *         ValidationException: state検証失敗時
         *         ExternalAPIException: トークン取得失敗時
         */
        post: operations["handle_callback_api_v1_auth_backlog_callback_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/backlog/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh Token
         * @description Backlogのアクセストークンをリフレッシュします
         *
         *     保存されているリフレッシュトークンを使用して、
         *     新しいアクセストークンを取得します。
         *
         *     Returns:
         *         新しいアクセストークンを含むレスポンス
         *
         *     Raises:
         *         HTTPException: トークンが見つからない、またはリフレッシュ失敗時
         */
        post: operations["refresh_token_api_v1_auth_backlog_refresh_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Verify Token
         * @description JWTトークンの有効性を確認し、ユーザー情報を返す
         *
         *     このエンドポイントは、フロントエンドのミドルウェアから呼び出され、
         *     トークンが有効かどうかを確認するために使用されます。
         */
        get: operations["verify_token_api_v1_auth_verify_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Current User Info
         * @description 現在ログイン中のユーザー情報を取得します
         *
         *     Returns:
         *         ユーザー情報（ロール情報を含む）
         */
        get: operations["get_current_user_info_api_v1_auth_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh Jwt Token
         * @description JWTトークンをリフレッシュします
         *
         *     リフレッシュトークンを使用して新しいアクセストークンとリフレッシュトークンを生成します。
         *
         *     Args:
         *         response: FastAPIレスポンスオブジェクト
         *         current_user: リフレッシュトークンから取得したユーザー
         *         db: データベースセッション
         *         formatter: レスポンスフォーマッター
         *
         *     Returns:
         *         新しいトークンとユーザー情報を含むレスポンス
         *
         *     Raises:
         *         HTTPException: リフレッシュトークンが無効な場合
         */
        post: operations["refresh_jwt_token_api_v1_auth_refresh_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Logout
         * @description ログアウト処理
         *
         *     HttpOnlyクッキーからアクセストークンを削除します。
         */
        post: operations["logout_api_v1_auth_logout_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/projects/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Projects
         * @description 現在のユーザーが参加しているプロジェクト一覧を取得
         *
         *     Args:
         *         db: データベースセッション
         *         current_user: 現在の認証済みユーザー
         *
         *     Returns:
         *         プロジェクト一覧
         */
        get: operations["get_projects_api_v1_projects__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/projects/{project_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Project Detail
         * @description プロジェクト詳細を取得します
         *
         *     権限チェック：プロジェクトメンバーのみアクセス可能
         *
         *     Args:
         *         project: プロジェクト（権限チェック済み）
         *         current_user: 現在の認証済みユーザー
         *
         *     Returns:
         *         プロジェクト詳細情報
         */
        get: operations["get_project_detail_api_v1_projects__project_id__get"];
        /**
         * Update Project
         * @description プロジェクト情報を更新します
         *
         *     権限チェック：プロジェクトリーダー以上の権限が必要
         *
         *     Args:
         *         update_data: 更新データ
         *         project: プロジェクト（権限チェック済み）
         *         current_user: 現在の認証済みユーザー
         *         db: データベースセッション
         *
         *     Returns:
         *         更新されたプロジェクト
         */
        put: operations["update_project_api_v1_projects__project_id__put"];
        post?: never;
        /**
         * Delete Project
         * @description プロジェクトを削除します
         *
         *     権限チェック：管理者権限が必要
         *
         *     Args:
         *         project: プロジェクト（権限チェック済み）
         *         current_user: 現在の認証済みユーザー
         *         db: データベースセッション
         *
         *     Returns:
         *         削除結果
         */
        delete: operations["delete_project_api_v1_projects__project_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/projects/{project_id}/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Project Metrics
         * @description プロジェクトのメトリクスを取得します
         *
         *     権限チェック：プロジェクトメンバーのみアクセス可能
         *
         *     Args:
         *         project: プロジェクト（権限チェック済み）
         *         current_user: 現在の認証済みユーザー
         *         period: 期間（week, month, quarter）
         *
         *     Returns:
         *         プロジェクトメトリクス
         */
        get: operations["get_project_metrics_api_v1_projects__project_id__metrics_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Users
         * @description ユーザー一覧を取得します（管理者のみ）
         *
         *     - **page**: ページ番号（1から開始）
         *     - **per_page**: 1ページあたりの件数（最大100）
         *     - **search**: 名前またはメールアドレスで部分一致検索
         *     - **role_id**: 特定のロールを持つユーザーのみ取得
         *     - **is_active**: アクティブ/非アクティブでフィルタ
         */
        get: operations["list_users_api_v1_users__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User
         * @description 特定のユーザー情報を取得します（管理者のみ）
         */
        get: operations["get_user_api_v1_users__user_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update User
         * @description ユーザー情報を更新します（管理者のみ）
         *
         *     注意: ロールの変更は別のエンドポイントを使用してください
         */
        patch: operations["update_user_api_v1_users__user_id__patch"];
        trace?: never;
    };
    "/api/v1/users/{user_id}/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update User Role
         * @description ユーザーのロールを更新します（管理者のみ）
         *
         *     特定のユーザーロール割り当てのロールを変更します。
         */
        put: operations["update_user_role_api_v1_users__user_id__roles_put"];
        /**
         * Assign Roles
         * @description ユーザーにロールを割り当てます（管理者のみ）
         *
         *     既に同じロールが割り当てられている場合はスキップされます。
         */
        post: operations["assign_roles_api_v1_users__user_id__roles_post"];
        /**
         * Remove Roles
         * @description ユーザーからロールを削除します（管理者のみ）
         */
        delete: operations["remove_roles_api_v1_users__user_id__roles_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/roles/available": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Available Roles
         * @description 割り当て可能なロール一覧を取得します（管理者のみ）
         */
        get: operations["get_available_roles_api_v1_users_roles_available_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cache/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Cache Statistics
         * @description キャッシュの統計情報を取得します
         *
         *     このエンドポイントは、Redisキャッシュの詳細な統計情報を提供します。
         *     ヒット率、メモリ使用量、接続数などの情報を含みます。
         *
         *     Args:
         *         current_user: 現在の認証済みユーザー（スーパーユーザーのみアクセス可能）
         *
         *     Returns:
         *         キャッシュ統計情報
         *
         *     Raises:
         *         HTTPException: 権限が不足している場合
         */
        get: operations["get_cache_statistics_api_v1_cache_stats_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cache/clear": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Clear All Cache
         * @description 全キャッシュをクリアします
         *
         *     このエンドポイントは、Redisに保存されている全てのキャッシュを削除します。
         *     注意: この操作は取り消しできません。
         *
         *     Args:
         *         current_user: 現在の認証済みユーザー（スーパーユーザーのみアクセス可能）
         *
         *     Returns:
         *         クリア結果
         *
         *     Raises:
         *         HTTPException: 権限が不足している場合
         */
        delete: operations["clear_all_cache_api_v1_cache_clear_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cache/clear/{pattern}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Clear Cache By Pattern
         * @description 指定されたパターンに一致するキャッシュをクリアします
         *
         *     このエンドポイントは、指定されたパターンに一致するキャッシュキーのみを削除します。
         *     例: /cache/clear/user_profile:* でユーザープロフィール関連のキャッシュを削除
         *
         *     Args:
         *         pattern: 削除するキャッシュキーのパターン
         *         current_user: 現在の認証済みユーザー（スーパーユーザーのみアクセス可能）
         *
         *     Returns:
         *         クリア結果
         *
         *     Raises:
         *         HTTPException: 権限が不足している場合
         */
        delete: operations["clear_cache_by_pattern_api_v1_cache_clear__pattern__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cache/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Cache Health Check
         * @description キャッシュの健全性チェック
         *
         *     このエンドポイントは、Redisキャッシュの接続状態を確認します。
         *     認証不要でアクセス可能です。
         *
         *     Returns:
         *         キャッシュの健全性情報
         */
        get: operations["cache_health_check_api_v1_cache_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/test/cache/simple": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Test Simple Cache
         * @description シンプルなキャッシュテスト
         *
         *     このエンドポイントは、基本的なキャッシュ機能をテストします。
         *     1分間キャッシュされ、2回目のリクエストからは高速で応答します。
         */
        get: operations["test_simple_cache_api_v1_test_cache_simple_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/test/cache/parameter/{param_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Test Parameter Cache
         * @description パラメータ付きキャッシュテスト
         *
         *     このエンドポイントは、パラメータに基づくキャッシュ機能をテストします。
         *     各パラメータ値に対して個別にキャッシュされます。
         */
        get: operations["test_parameter_cache_api_v1_test_cache_parameter__param_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/test/cache/query": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Test Query Cache
         * @description クエリパラメータ付きキャッシュテスト
         *
         *     このエンドポイントは、クエリパラメータに基づくキャッシュ機能をテストします。
         *     クエリパラメータの組み合わせごとに個別にキャッシュされます。
         */
        get: operations["test_query_cache_api_v1_test_cache_query_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/test/cache/performance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Test Performance Cache
         * @description パフォーマンステスト用キャッシュ
         *
         *     このエンドポイントは、キャッシュのパフォーマンス効果を測定するためのテストです。
         *     重い処理をシミュレートして、キャッシュの効果を明確に示します。
         */
        get: operations["test_performance_cache_api_v1_test_cache_performance_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/test/cache/invalidate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Test Cache Invalidation
         * @description キャッシュ無効化テスト
         *
         *     このエンドポイントは、キャッシュ無効化機能をテストします。
         *     実行後、test_で始まる全てのキャッシュが無効化されます。
         */
        post: operations["test_cache_invalidation_api_v1_test_cache_invalidate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/test/cache/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Test Cache Stats
         * @description キャッシュ統計テスト
         *
         *     このエンドポイントは、キャッシュの統計情報を返します。
         *     認証不要でアクセス可能です。
         */
        get: operations["test_cache_stats_api_v1_test_cache_stats_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sync/connection/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Connection Status
         * @description Backlog接続状態を取得する（トークン自動リフレッシュ付き）
         */
        get: operations["get_connection_status_api_v1_sync_connection_status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sync/user/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sync User Tasks
         * @description 現在のユーザーのタスクを同期
         *
         *     Backlogからタスクデータを取得し、ローカルデータベースと同期します。
         */
        post: operations["sync_user_tasks_api_v1_sync_user_tasks_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sync/project/{project_id}/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sync Project Tasks
         * @description 指定されたプロジェクトのタスクを同期
         *
         *     プロジェクトメンバーのみがアクセス可能です。
         */
        post: operations["sync_project_tasks_api_v1_sync_project__project_id__tasks_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sync/project/{project_id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Sync Status
         * @description プロジェクトの同期状況を取得
         *
         *     最後の同期日時やタスク数などの情報を返します。
         */
        get: operations["get_sync_status_api_v1_sync_project__project_id__status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sync/projects/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sync All Projects
         * @description Backlogから全プロジェクトを同期
         *
         *     管理者またはプロジェクトリーダーのみがアクセス可能です。
         */
        post: operations["sync_all_projects_api_v1_sync_projects_all_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sync/issue/{issue_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sync Single Issue
         * @description 単一の課題を同期
         *
         *     特定の課題のみを即座に同期します。
         */
        post: operations["sync_single_issue_api_v1_sync_issue__issue_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sync/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Sync History
         * @description 同期履歴を取得
         *
         *     ユーザーの同期履歴を新しい順に返します。
         */
        get: operations["get_sync_history_api_v1_sync_history_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tasks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Tasks
         * @description タスク一覧を取得
         *
         *     ユーザーがアクセス可能なタスクのみを返します。
         */
        get: operations["get_tasks_api_v1_tasks__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tasks/my": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get My Tasks
         * @description 自分に割り当てられたタスクを取得
         */
        get: operations["get_my_tasks_api_v1_tasks_my_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tasks/{task_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Task
         * @description タスクの詳細を取得
         */
        get: operations["get_task_api_v1_tasks__task_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tasks/backlog/{backlog_key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Task By Backlog Key
         * @description Backlogキーでタスクを取得
         */
        get: operations["get_task_by_backlog_key_api_v1_tasks_backlog__backlog_key__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tasks/statistics/summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Task Statistics
         * @description タスクの統計情報を取得
         */
        get: operations["get_task_statistics_api_v1_tasks_statistics_summary_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/analytics/project/{project_id}/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Project Health
         * @description プロジェクトの健康度を取得
         *
         *     プロジェクトの総合的な健康度スコアと、
         *     タスクの完了率、期限遵守率などの詳細情報を提供します。
         *
         *     Args:
         *         project: プロジェクト
         *         db: データベースセッション
         *         current_user: 現在のユーザー
         *
         *     Returns:
         *         健康度情報
         */
        get: operations["get_project_health_api_v1_analytics_project__project_id__health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/analytics/project/{project_id}/bottlenecks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Project Bottlenecks
         * @description プロジェクトのボトルネックを検出
         *
         *     長期間滞留しているタスク、特定メンバーへのタスク集中、
         *     期限切れタスクなどのボトルネックを検出します。
         *
         *     Args:
         *         project: プロジェクト
         *         db: データベースセッション
         *         current_user: 現在のユーザー
         *
         *     Returns:
         *         ボトルネック情報のリスト
         */
        get: operations["get_project_bottlenecks_api_v1_analytics_project__project_id__bottlenecks_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/analytics/project/{project_id}/velocity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Project Velocity
         * @description プロジェクトのベロシティトレンドを取得
         *
         *     指定期間の日別完了タスク数を取得します。
         *
         *     Args:
         *         project: プロジェクト
         *         db: データベースセッション
         *         current_user: 現在のユーザー
         *         period_days: 分析期間（デフォルト30日）
         *
         *     Returns:
         *         日別ベロシティデータ
         */
        get: operations["get_project_velocity_api_v1_analytics_project__project_id__velocity_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/analytics/project/{project_id}/cycle-time": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Project Cycle Time
         * @description プロジェクトのサイクルタイム分析を取得
         *
         *     各ステータスでのタスクの平均滞留時間を分析します。
         *
         *     Args:
         *         project: プロジェクト
         *         db: データベースセッション
         *         current_user: 現在のユーザー
         *
         *     Returns:
         *         サイクルタイム分析データ
         */
        get: operations["get_project_cycle_time_api_v1_analytics_project__project_id__cycle_time_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/analytics/personal/dashboard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Personal Dashboard
         * @description 個人ダッシュボードデータを取得
         *
         *     現在のユーザーの個人的な生産性指標を取得します。
         *     完了タスク数、平均処理時間、進行中タスク数、作業フロー分析、
         *     生産性トレンド、スキルマトリックスを含みます。
         *
         *     Args:
         *         current_user: 現在のユーザー
         *         db: データベースセッション
         *         period_days: 分析期間（デフォルト30日）
         *
         *     Returns:
         *         個人ダッシュボードデータ
         */
        get: operations["get_personal_dashboard_api_v1_analytics_personal_dashboard_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/analytics/personal/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Personal Tasks
         * @description 個人のタスク一覧を取得
         *
         *     現在のユーザーに割り当てられているタスクの一覧を取得します。
         *     ステータスによるフィルタリング、ページネーションに対応。
         *
         *     Args:
         *         current_user: 現在のユーザー
         *         db: データベースセッション
         *         status: フィルタリングするタスクステータス（オプション）
         *         limit: 取得件数の上限
         *         offset: オフセット
         *
         *     Returns:
         *         タスク一覧と関連情報
         */
        get: operations["get_personal_tasks_api_v1_analytics_personal_tasks_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/analytics/personal/performance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Personal Performance
         * @description 個人のパフォーマンス指標を取得
         *
         *     指定期間の個人パフォーマンス詳細データを取得します。
         *     週別・月別の完了率、タスクタイプ別効率、時間帯別生産性など。
         *
         *     Args:
         *         current_user: 現在のユーザー
         *         db: データベースセッション
         *         period_days: 分析期間（デフォルト90日）
         *
         *     Returns:
         *         パフォーマンス指標の詳細
         */
        get: operations["get_personal_performance_api_v1_analytics_personal_performance_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/backlog/connection": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Connection Status
         * @description Backlog連携状態を取得する
         */
        get: operations["get_connection_status_api_v1_backlog_connection_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/backlog/connect/oauth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Connect With Oauth
         * @description OAuthでBacklogと連携を開始する（認証URLを返す）
         */
        post: operations["connect_with_oauth_api_v1_backlog_connect_oauth_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/backlog/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Test Connection
         * @description Backlog接続をテストする
         */
        post: operations["test_connection_api_v1_backlog_test_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/backlog/disconnect": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disconnect Backlog
         * @description Backlog連携を解除する
         */
        post: operations["disconnect_backlog_api_v1_backlog_disconnect_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/backlog/connection/space-key": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update Space Key
         * @description Backlogスペースキーを更新する
         *
         *     既存のOAuthトークンに紐づくスペースキーを更新します。
         */
        put: operations["update_space_key_api_v1_backlog_connection_space_key_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/backlog/projects/{project_id}/statuses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Project Statuses
         * @description プロジェクトのステータス一覧を取得する
         *
         *     Backlog APIからプロジェクト固有のステータス一覧を取得します。
         *     結果は5分間キャッシュされます。
         */
        get: operations["get_project_statuses_api_v1_backlog_projects__project_id__statuses_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/backlog/user/project-statuses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Project Statuses
         * @description ユーザーが関わっているプロジェクトのステータス情報を取得
         *
         *     ユーザーがメンバーとして参加している全プロジェクトの
         *     ステータス情報を集約して返します。
         */
        get: operations["get_user_project_statuses_api_v1_backlog_user_project_statuses_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reports/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send Test Report
         * @description テストレポートを送信
         *
         *     指定された設定でテストレポートを即座に送信します。
         */
        post: operations["send_test_report_api_v1_reports_test_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reports/schedules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Report Schedules
         * @description レポート配信スケジュール一覧を取得
         *
         *     現在のユーザーのレポート配信スケジュール設定を取得します。
         */
        get: operations["get_report_schedules_api_v1_reports_schedules_get"];
        put?: never;
        /**
         * Create Report Schedule
         * @description レポート配信スケジュールを作成
         *
         *     新しいレポート配信スケジュールを設定します。
         */
        post: operations["create_report_schedule_api_v1_reports_schedules_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reports/schedules/{schedule_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update Report Schedule
         * @description レポート配信スケジュールを更新
         *
         *     既存のレポート配信スケジュールを更新します。
         */
        put: operations["update_report_schedule_api_v1_reports_schedules__schedule_id__put"];
        post?: never;
        /**
         * Delete Report Schedule
         * @description レポート配信スケジュールを削除
         *
         *     指定されたレポート配信スケジュールを削除します。
         */
        delete: operations["delete_report_schedule_api_v1_reports_schedules__schedule_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Root */
        get: operations["root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check
         * @description アプリケーションの健全性チェック
         *
         *     このエンドポイントは、アプリケーション全体の健全性を確認します。
         */
        get: operations["health_check_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * AuthorizationResponse
         * @description 認証URL生成のレスポンススキーマ
         * @example {
         *       "authorization_url": "https://example.backlog.jp/OAuth2AccessRequest.action?response_type=code&client_id=xxx&redirect_uri=xxx&state=xxx",
         *       "expected_space": "example-space",
         *       "state": "random_state_string"
         *     }
         */
        AuthorizationResponse: {
            /**
             * Authorization Url
             * @description Backlogの認証URL
             */
            authorization_url: string;
            /**
             * State
             * @description CSRF対策用のランダムな文字列
             */
            state: string;
            /**
             * Expected Space
             * @description 期待されるBacklogスペースキー
             */
            expected_space?: string | null;
        };
        /**
         * BacklogConnectionStatus
         * @description Backlog連携状態のレスポンススキーマ
         */
        BacklogConnectionStatus: {
            /**
             * Space Key
             * @description Backlogスペースキー
             */
            space_key?: string | null;
            /**
             * Connection Type
             * @description 連携方法
             */
            connection_type?: "oauth" | null;
            /**
             * Is Connected
             * @description 連携済みかどうか
             */
            is_connected: boolean;
            /**
             * Connected At
             * @description 連携日時
             */
            connected_at?: string | null;
            /**
             * Last Sync At
             * @description 最終同期日時
             */
            last_sync_at?: string | null;
            /**
             * Expires At
             * @description OAuth トークンの有効期限
             */
            expires_at?: string | null;
            /**
             * User Email
             * @description 連携されたBacklogユーザーのメール
             */
            user_email?: string | null;
        };
        /**
         * BacklogSpaceKeyUpdate
         * @description スペースキー更新のリクエストスキーマ
         * @example {
         *       "space_key": "example-space"
         *     }
         */
        BacklogSpaceKeyUpdate: {
            /**
             * Space Key
             * @description Backlogスペースキー
             */
            space_key: string;
        };
        /**
         * CallbackRequest
         * @description OAuth2.0コールバックのリクエストスキーマ
         * @example {
         *       "code": "authorization_code_from_backlog",
         *       "state": "random_state_string"
         *     }
         */
        CallbackRequest: {
            /**
             * Code
             * @description Backlogから受け取った認証コード
             */
            code: string;
            /**
             * State
             * @description 認証開始時に生成したstate
             */
            state: string;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * HealthResponse
         * @description ヘルスチェックのレスポンス
         * @example {
         *       "message": "Team Insight API is running",
         *       "services": {
         *         "api": "healthy",
         *         "database": "healthy",
         *         "redis": "healthy"
         *       },
         *       "status": "healthy",
         *       "timestamp": "2024-01-01T00:00:00Z"
         *     }
         */
        HealthResponse: {
            /**
             * Status
             * @description システム全体の健全性ステータス
             * @enum {string}
             */
            status: "healthy" | "unhealthy";
            services: components["schemas"]["ServiceStatus"];
            /**
             * Message
             * @description ステータスメッセージ
             * @example Team Insight API is running
             */
            message: string;
            /**
             * Timestamp
             * Format: date-time
             * @description チェック実行時刻
             */
            timestamp: string;
        };
        /**
         * ProjectBrief
         * @description プロジェクト簡易情報
         */
        ProjectBrief: {
            /** Id */
            id: number;
            /** Name */
            name: string;
            /** Project Key */
            project_key: string;
            /** Backlog Id */
            backlog_id: number;
        };
        /** ProjectUpdate */
        ProjectUpdate: {
            /** Name */
            name?: string | null;
            /** Description */
            description?: string | null;
            /** Project Key */
            project_key?: string | null;
        };
        /**
         * ReportRecipientType
         * @description レポート受信者タイプ
         * @enum {string}
         */
        ReportRecipientType: "personal" | "project" | "team";
        /**
         * ReportScheduleListResponse
         * @description レポート配信スケジュール一覧レスポンス
         * @example {
         *       "schedules": [
         *         {
         *           "created_at": "2025-01-01T00:00:00",
         *           "enabled": true,
         *           "id": 1,
         *           "recipient_type": "personal",
         *           "report_type": "weekly",
         *           "send_time": "09:00",
         *           "updated_at": "2025-01-01T00:00:00",
         *           "user_id": 1
         *         }
         *       ],
         *       "total": 1
         *     }
         */
        ReportScheduleListResponse: {
            /**
             * Schedules
             * @description スケジュール一覧
             */
            schedules: components["schemas"]["ReportScheduleResponse"][];
            /**
             * Total
             * @description 総件数
             */
            total: number;
        };
        /**
         * ReportScheduleRequest
         * @description レポート配信スケジュール設定リクエスト
         * @example {
         *       "enabled": true,
         *       "recipient_type": "personal",
         *       "report_type": "weekly",
         *       "send_time": "09:00"
         *     }
         */
        ReportScheduleRequest: {
            report_type: components["schemas"]["ReportType"];
            /** @description 受信者タイプ */
            recipient_type: components["schemas"]["ReportRecipientType"];
            /**
             * Project Id
             * @description プロジェクトID（PROJECT受信者タイプの場合必須）
             */
            project_id?: number | null;
            /**
             * Enabled
             * @description 配信有効/無効
             * @default true
             */
            enabled: boolean;
            /**
             * Send Time
             * @description 送信時刻（HH:MM形式）
             */
            send_time?: string | null;
        };
        /**
         * ReportScheduleResponse
         * @description レポート配信スケジュール設定レスポンス
         */
        ReportScheduleResponse: {
            /**
             * Id
             * @description スケジュールID
             */
            id: number;
            /**
             * User Id
             * @description ユーザーID
             */
            user_id: number;
            report_type: components["schemas"]["ReportType"];
            /** @description 受信者タイプ */
            recipient_type: components["schemas"]["ReportRecipientType"];
            /**
             * Project Id
             * @description プロジェクトID
             */
            project_id?: number | null;
            /**
             * Enabled
             * @description 配信有効/無効
             */
            enabled: boolean;
            /**
             * Send Time
             * @description 送信時刻
             */
            send_time?: string | null;
            /**
             * Created At
             * Format: date-time
             * @description 作成日時
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description 更新日時
             */
            updated_at: string;
        };
        /**
         * ReportType
         * @description レポートタイプ
         * @enum {string}
         */
        ReportType: "daily" | "weekly" | "monthly";
        /**
         * RoleResponse
         * @description ロール情報のレスポンススキーマ
         */
        RoleResponse: {
            /**
             * Id
             * @description ロールID
             */
            id: number;
            /**
             * Name
             * @description ロール名
             */
            name: string;
            /**
             * Description
             * @description ロールの説明
             */
            description?: string | null;
        };
        /**
         * ServiceStatus
         * @description 各サービスの健全性ステータス
         */
        ServiceStatus: {
            /**
             * Api
             * @description APIサーバーの状態
             * @enum {string}
             */
            api: "healthy" | "unhealthy";
            /**
             * Database
             * @description データベースの状態
             * @enum {string}
             */
            database: "healthy" | "unhealthy";
            /**
             * Redis
             * @description Redisキャッシュの状態
             * @enum {string}
             */
            redis: "healthy" | "unhealthy";
        };
        /**
         * SyncStatus
         * @description 同期ステータス
         * @enum {string}
         */
        SyncStatus: "started" | "in_progress" | "completed" | "failed";
        /**
         * SyncType
         * @description 同期タイプ
         * @enum {string}
         */
        SyncType: "user_tasks" | "project_tasks" | "all_projects" | "single_issue" | "project_members";
        /**
         * TaskListResponse
         * @description タスク一覧レスポンス
         */
        TaskListResponse: {
            /** Total */
            total: number;
            /** Limit */
            limit: number;
            /** Offset */
            offset: number;
            /** Tasks */
            tasks: components["schemas"]["TaskResponse"][];
        };
        /**
         * TaskResponse
         * @description タスクレスポンス用スキーマ
         */
        TaskResponse: {
            /** Id */
            id: number;
            /** Backlog Id */
            backlog_id: number;
            /** Backlog Key */
            backlog_key: string;
            /** Title */
            title: string;
            /** Description */
            description: string | null;
            status: components["schemas"]["TaskStatus"];
            /** Priority */
            priority: number | null;
            /** Issue Type Id */
            issue_type_id: number | null;
            /** Issue Type Name */
            issue_type_name: string | null;
            /** Estimated Hours */
            estimated_hours: number | null;
            /** Actual Hours */
            actual_hours: number | null;
            /** Start Date */
            start_date: string | null;
            /** Due Date */
            due_date: string | null;
            /** Completed Date */
            completed_date: string | null;
            /** Milestone Id */
            milestone_id: number | null;
            /** Milestone Name */
            milestone_name: string | null;
            /** Category Names */
            category_names: string | null;
            /** Version Names */
            version_names: string | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            project: components["schemas"]["ProjectBrief"] | null;
            assignee: components["schemas"]["UserBrief"] | null;
            reporter: components["schemas"]["UserBrief"] | null;
        };
        /**
         * TaskStatus
         * @description タスクステータス
         * @enum {string}
         */
        TaskStatus: "TODO" | "IN_PROGRESS" | "RESOLVED" | "CLOSED";
        /**
         * TestReportRequest
         * @description テストレポート送信リクエスト
         * @example {
         *       "recipient_type": "personal",
         *       "report_type": "weekly"
         *     }
         */
        TestReportRequest: {
            report_type: components["schemas"]["ReportType"];
            /** @description 受信者タイプ */
            recipient_type: components["schemas"]["ReportRecipientType"];
            /**
             * Project Id
             * @description プロジェクトID（PROJECT受信者タイプの場合必須）
             */
            project_id?: number | null;
            /**
             * Email
             * @description 送信先メールアドレス（指定しない場合は登録メールアドレス）
             */
            email?: string | null;
        };
        /**
         * TokenResponse
         * @description トークンレスポンススキーマ
         * @example {
         *       "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
         *       "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
         *       "token_type": "bearer",
         *       "user": {
         *         "backlog_id": 12345,
         *         "email": "user@example.com",
         *         "id": 1,
         *         "name": "山田太郎",
         *         "user_id": "yamada"
         *       }
         *     }
         */
        TokenResponse: {
            /**
             * Access Token
             * @description アプリケーション用のJWTアクセストークン
             */
            access_token: string;
            /**
             * Refresh Token
             * @description JWTリフレッシュトークン
             */
            refresh_token: string;
            /**
             * Token Type
             * @description トークンタイプ
             * @default bearer
             */
            token_type: string;
            /** @description ユーザー情報 */
            user: components["schemas"]["UserInfoResponse"];
        };
        /**
         * UserBrief
         * @description ユーザー簡易情報
         */
        UserBrief: {
            /** Id */
            id: number;
            /** Name */
            name: string | null;
            /** Email */
            email: string | null;
            /** Backlog Id */
            backlog_id: number | null;
        };
        /**
         * UserInfoResponse
         * @description ユーザー情報のレスポンススキーマ
         * @example {
         *       "backlog_id": 12345,
         *       "email": "user@example.com",
         *       "id": 1,
         *       "name": "山田太郎",
         *       "user_id": "yamada",
         *       "user_roles": [
         *         {
         *           "id": 1,
         *           "role": {
         *             "description": "システム管理者",
         *             "id": 1,
         *             "name": "ADMIN"
         *           },
         *           "role_id": 1
         *         }
         *       ]
         *     }
         */
        UserInfoResponse: {
            /**
             * Id
             * @description 内部ユーザーID
             */
            id: number;
            /**
             * Backlog Id
             * @description BacklogのユーザーID
             */
            backlog_id?: number | null;
            /**
             * Email
             * @description メールアドレス
             */
            email?: string | null;
            /**
             * Name
             * @description ユーザー名
             */
            name: string;
            /**
             * User Id
             * @description BacklogのユーザーID（文字列）
             */
            user_id?: string | null;
            /**
             * Backlog Space Key
             * @description BacklogスペースキーID
             */
            backlog_space_key?: string | null;
            /**
             * User Roles
             * @description ユーザーのロール一覧
             */
            user_roles?: components["schemas"]["UserRoleResponse"][];
        };
        /**
         * UserListResponse
         * @description ユーザー一覧レスポンススキーマ
         */
        UserListResponse: {
            /**
             * Users
             * @description ユーザー一覧
             */
            users: components["schemas"]["UserResponse"][];
            /**
             * Total
             * @description 総ユーザー数
             */
            total: number;
            /**
             * Page
             * @description 現在のページ
             */
            page: number;
            /**
             * Per Page
             * @description 1ページあたりの件数
             */
            per_page: number;
        };
        /**
         * UserResponse
         * @description ユーザー情報レスポンススキーマ
         */
        UserResponse: {
            /**
             * Email
             * @description メールアドレス
             */
            email?: string | null;
            /**
             * Name
             * @description ユーザー名
             */
            name: string;
            /**
             * Is Active
             * @description アクティブ状態
             * @default true
             */
            is_active: boolean;
            /**
             * Id
             * @description ユーザーID
             */
            id: number;
            /**
             * Backlog Id
             * @description BacklogユーザーID
             */
            backlog_id?: number | null;
            /**
             * User Id
             * @description BacklogユーザーID（文字列）
             */
            user_id?: string | null;
            /**
             * User Roles
             * @description ユーザーのロール一覧
             */
            user_roles?: components["schemas"]["UserRoleResponse"][];
            /**
             * Created At
             * Format: date-time
             * @description 作成日時
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description 更新日時
             */
            updated_at: string;
        };
        /**
         * UserRoleAssignment
         * @description ユーザーロール割り当てスキーマ
         */
        UserRoleAssignment: {
            /**
             * Role Id
             * @description ロールID
             */
            role_id: number;
            /**
             * Project Id
             * @description プロジェクトID（NULLの場合はグローバルロール）
             */
            project_id?: number | null;
        };
        /**
         * UserRoleAssignmentRequest
         * @description ユーザーロール割り当てリクエストスキーマ
         */
        UserRoleAssignmentRequest: {
            /**
             * Assignments
             * @description 割り当てるロールのリスト
             */
            assignments: components["schemas"]["UserRoleAssignment"][];
        };
        /**
         * UserRoleRemovalRequest
         * @description ユーザーロール削除リクエストスキーマ
         */
        UserRoleRemovalRequest: {
            /**
             * User Role Ids
             * @description 削除するユーザーロールIDのリスト
             */
            user_role_ids: number[];
        };
        /**
         * UserRoleResponse
         * @description ユーザーロール情報のレスポンススキーマ
         */
        UserRoleResponse: {
            /**
             * Id
             * @description ユーザーロールID
             */
            id: number;
            /**
             * Role Id
             * @description ロールID
             */
            role_id: number;
            /**
             * Project Id
             * @description プロジェクトID（NULLの場合はグローバルロール）
             */
            project_id?: number | null;
            /** @description ロール情報 */
            role: components["schemas"]["RoleResponse"];
        };
        /**
         * UserRoleUpdateRequest
         * @description ユーザーロール更新リクエストスキーマ
         */
        UserRoleUpdateRequest: {
            /**
             * User Role Id
             * @description 更新するユーザーロールID
             */
            user_role_id: number;
            /**
             * Role Id
             * @description 新しいロールID
             */
            role_id: number;
        };
        /**
         * UserUpdate
         * @description ユーザー更新スキーマ
         */
        UserUpdate: {
            /**
             * Email
             * @description メールアドレス
             */
            email?: string | null;
            /**
             * Name
             * @description ユーザー名
             */
            name?: string | null;
            /**
             * Is Active
             * @description アクティブ状態
             */
            is_active?: boolean | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_authorization_url_api_v1_auth_backlog_authorize_get: {
        parameters: {
            query?: {
                /** @description BacklogのスペースキーOptional）環境変数がデフォルト */
                space_key?: string | null;
                /** @description アカウント選択を強制するかどうか */
                force_account_selection?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthorizationResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    handle_callback_api_v1_auth_backlog_callback_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CallbackRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    refresh_token_api_v1_auth_backlog_refresh_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenResponse"];
                };
            };
        };
    };
    verify_token_api_v1_auth_verify_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserInfoResponse"];
                };
            };
        };
    };
    get_current_user_info_api_v1_auth_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserInfoResponse"];
                };
            };
        };
    };
    refresh_jwt_token_api_v1_auth_refresh_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    logout_api_v1_auth_logout_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    get_projects_api_v1_projects__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    get_project_detail_api_v1_projects__project_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description プロジェクトID */
                project_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_project_api_v1_projects__project_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description プロジェクトID */
                project_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_project_api_v1_projects__project_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description プロジェクトID */
                project_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_project_metrics_api_v1_projects__project_id__metrics_get: {
        parameters: {
            query?: {
                period?: string;
            };
            header?: never;
            path: {
                /** @description プロジェクトID */
                project_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_users_api_v1_users__get: {
        parameters: {
            query?: {
                /** @description ページ番号 */
                page?: number;
                /** @description 1ページあたりの件数 */
                per_page?: number;
                /** @description 検索キーワード（名前、メールアドレス） */
                search?: string | null;
                /** @description ロールIDでフィルタ */
                role_id?: number | null;
                /** @description アクティブ状態でフィルタ */
                is_active?: boolean | null;
                /** @description ソートフィールド */
                sort_by?: string | null;
                /** @description ソート順序（asc/desc） */
                sort_order?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserListResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_api_v1_users__user_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_user_api_v1_users__user_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_user_role_api_v1_users__user_id__roles_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserRoleUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    assign_roles_api_v1_users__user_id__roles_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserRoleAssignmentRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    remove_roles_api_v1_users__user_id__roles_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserRoleRemovalRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_available_roles_api_v1_users_roles_available_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleResponse"][];
                };
            };
        };
    };
    get_cache_statistics_api_v1_cache_stats_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    clear_all_cache_api_v1_cache_clear_delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    clear_cache_by_pattern_api_v1_cache_clear__pattern__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                pattern: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    cache_health_check_api_v1_cache_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    test_simple_cache_api_v1_test_cache_simple_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    test_parameter_cache_api_v1_test_cache_parameter__param_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                param_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    test_query_cache_api_v1_test_cache_query_get: {
        parameters: {
            query?: {
                page?: number;
                limit?: number;
                sort?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    test_performance_cache_api_v1_test_cache_performance_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    test_cache_invalidation_api_v1_test_cache_invalidate_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    test_cache_stats_api_v1_test_cache_stats_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    get_connection_status_api_v1_sync_connection_status_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    sync_user_tasks_api_v1_sync_user_tasks_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    sync_project_tasks_api_v1_sync_project__project_id__tasks_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description プロジェクトID */
                project_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_sync_status_api_v1_sync_project__project_id__status_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description プロジェクトID */
                project_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    sync_all_projects_api_v1_sync_projects_all_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    sync_single_issue_api_v1_sync_issue__issue_id__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                issue_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_sync_history_api_v1_sync_history_get: {
        parameters: {
            query?: {
                /** @description 同期タイプでフィルタ */
                sync_type?: components["schemas"]["SyncType"] | null;
                /** @description ステータスでフィルタ */
                status?: components["schemas"]["SyncStatus"] | null;
                /** @description 過去何日分の履歴を取得するか */
                days?: number;
                /** @description 取得する最大件数 */
                limit?: number;
                /** @description オフセット */
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_tasks_api_v1_tasks__get: {
        parameters: {
            query?: {
                /** @description プロジェクトIDでフィルタ */
                project_id?: number | null;
                /** @description ステータスでフィルタ */
                status?: components["schemas"]["TaskStatus"] | null;
                /** @description 担当者IDでフィルタ */
                assignee_id?: number | null;
                /** @description 優先度でフィルタ */
                priority?: number | null;
                /** @description タイトルと説明で検索 */
                search?: string | null;
                /** @description 取得件数 */
                limit?: number;
                /** @description オフセット */
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_my_tasks_api_v1_tasks_my_get: {
        parameters: {
            query?: {
                /** @description ステータスでフィルタ */
                status?: components["schemas"]["TaskStatus"] | null;
                /** @description プロジェクトIDでフィルタ */
                project_id?: number | null;
                /** @description 過去何日分のタスクを取得するか */
                days?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskListResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_task_api_v1_tasks__task_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                task_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_task_by_backlog_key_api_v1_tasks_backlog__backlog_key__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                backlog_key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_task_statistics_api_v1_tasks_statistics_summary_get: {
        parameters: {
            query?: {
                /** @description プロジェクトIDでフィルタ */
                project_id?: number | null;
                /** @description 過去何日分の統計を取得するか */
                days?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_project_health_api_v1_analytics_project__project_id__health_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description プロジェクトID */
                project_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_project_bottlenecks_api_v1_analytics_project__project_id__bottlenecks_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description プロジェクトID */
                project_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>[];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_project_velocity_api_v1_analytics_project__project_id__velocity_get: {
        parameters: {
            query?: {
                period_days?: number;
            };
            header?: never;
            path: {
                /** @description プロジェクトID */
                project_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>[];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_project_cycle_time_api_v1_analytics_project__project_id__cycle_time_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description プロジェクトID */
                project_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_personal_dashboard_api_v1_analytics_personal_dashboard_get: {
        parameters: {
            query?: {
                period_days?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_personal_tasks_api_v1_analytics_personal_tasks_get: {
        parameters: {
            query?: {
                task_status?: components["schemas"]["TaskStatus"] | null;
                limit?: number;
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_personal_performance_api_v1_analytics_personal_performance_get: {
        parameters: {
            query?: {
                period_days?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_connection_status_api_v1_backlog_connection_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BacklogConnectionStatus"];
                };
            };
        };
    };
    connect_with_oauth_api_v1_backlog_connect_oauth_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    test_connection_api_v1_backlog_test_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    disconnect_backlog_api_v1_backlog_disconnect_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    update_space_key_api_v1_backlog_connection_space_key_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BacklogSpaceKeyUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_project_statuses_api_v1_backlog_projects__project_id__statuses_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_project_statuses_api_v1_backlog_user_project_statuses_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    send_test_report_api_v1_reports_test_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TestReportRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_report_schedules_api_v1_reports_schedules_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReportScheduleListResponse"];
                };
            };
        };
    };
    create_report_schedule_api_v1_reports_schedules_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReportScheduleRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReportScheduleResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_report_schedule_api_v1_reports_schedules__schedule_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                schedule_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReportScheduleRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReportScheduleResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_report_schedule_api_v1_reports_schedules__schedule_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                schedule_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    health_check_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthResponse"];
                };
            };
        };
    };
}
