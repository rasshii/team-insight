/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/auth/backlog/authorize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Authorization Url
         * @description Backlog OAuth2.0認証URLを生成します
         *
         *     このエンドポイントは、ユーザーをBacklogの認証ページにリダイレクトするための
         *     URLを生成します。CSRF攻撃を防ぐため、stateパラメータも生成して保存します。
         *
         *     Returns:
         *         認証URLとstateを含むレスポンス
         */
        get: operations["get_authorization_url_api_v1_auth_backlog_authorize_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/backlog/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Handle Callback
         * @description Backlog OAuth2.0認証のコールバックを処理します
         *
         *     Backlogから認証コードを受け取り、アクセストークンに交換します。
         *     また、CSRF攻撃を防ぐためstateパラメータを検証します。
         *
         *     Args:
         *         request: 認証コードとstateを含むリクエスト
         *
         *     Returns:
         *         アクセストークンとユーザー情報を含むレスポンス
         *
         *     Raises:
         *         HTTPException: state検証失敗またはトークン取得失敗時
         */
        post: operations["handle_callback_api_v1_auth_backlog_callback_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/backlog/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh Token
         * @description Backlogのアクセストークンをリフレッシュします
         *
         *     保存されているリフレッシュトークンを使用して、
         *     新しいアクセストークンを取得します。
         *
         *     Returns:
         *         新しいアクセストークンを含むレスポンス
         *
         *     Raises:
         *         HTTPException: トークンが見つからない、またはリフレッシュ失敗時
         */
        post: operations["refresh_token_api_v1_auth_backlog_refresh_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Verify Token
         * @description JWTトークンの有効性を確認し、ユーザー情報を返す
         *
         *     このエンドポイントは、フロントエンドのミドルウェアから呼び出され、
         *     トークンが有効かどうかを確認するために使用されます。
         */
        get: operations["verify_token_api_v1_auth_verify_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Current User Info
         * @description 現在ログイン中のユーザー情報を取得します
         *
         *     Returns:
         *         ユーザー情報
         */
        get: operations["get_current_user_info_api_v1_auth_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cache/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Cache Statistics
         * @description キャッシュの統計情報を取得します
         *
         *     このエンドポイントは、Redisキャッシュの詳細な統計情報を提供します。
         *     ヒット率、メモリ使用量、接続数などの情報を含みます。
         *
         *     Args:
         *         current_user: 現在の認証済みユーザー（スーパーユーザーのみアクセス可能）
         *
         *     Returns:
         *         キャッシュ統計情報
         *
         *     Raises:
         *         HTTPException: 権限が不足している場合
         */
        get: operations["get_cache_statistics_api_v1_cache_stats_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cache/clear": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Clear All Cache
         * @description 全キャッシュをクリアします
         *
         *     このエンドポイントは、Redisに保存されている全てのキャッシュを削除します。
         *     注意: この操作は取り消しできません。
         *
         *     Args:
         *         current_user: 現在の認証済みユーザー（スーパーユーザーのみアクセス可能）
         *
         *     Returns:
         *         クリア結果
         *
         *     Raises:
         *         HTTPException: 権限が不足している場合
         */
        delete: operations["clear_all_cache_api_v1_cache_clear_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cache/clear/{pattern}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Clear Cache By Pattern
         * @description 指定されたパターンに一致するキャッシュをクリアします
         *
         *     このエンドポイントは、指定されたパターンに一致するキャッシュキーのみを削除します。
         *     例: /cache/clear/user_profile:* でユーザープロフィール関連のキャッシュを削除
         *
         *     Args:
         *         pattern: 削除するキャッシュキーのパターン
         *         current_user: 現在の認証済みユーザー（スーパーユーザーのみアクセス可能）
         *
         *     Returns:
         *         クリア結果
         *
         *     Raises:
         *         HTTPException: 権限が不足している場合
         */
        delete: operations["clear_cache_by_pattern_api_v1_cache_clear__pattern__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cache/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Cache Health Check
         * @description キャッシュの健全性チェック
         *
         *     このエンドポイントは、Redisキャッシュの接続状態を確認します。
         *     認証不要でアクセス可能です。
         *
         *     Returns:
         *         キャッシュの健全性情報
         */
        get: operations["cache_health_check_api_v1_cache_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/projects/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Projects
         * @description プロジェクト一覧を取得します
         *
         *     このエンドポイントは、ユーザーがアクセス可能なプロジェクト一覧を返します。
         *     結果は10分間キャッシュされ、データベースへの負荷を軽減します。
         *
         *     Args:
         *         db: データベースセッション
         *         current_user: 現在の認証済みユーザー
         *
         *     Returns:
         *         プロジェクト一覧
         *
         *     Raises:
         *         HTTPException: データ取得に失敗した場合
         */
        get: operations["get_projects_api_v1_projects__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/projects/{project_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Project Detail
         * @description プロジェクト詳細を取得します
         *
         *     このエンドポイントは、指定されたプロジェクトの詳細情報を返します。
         *     結果は5分間キャッシュされ、データベースへの負荷を軽減します。
         *
         *     Args:
         *         project_id: プロジェクトID
         *         db: データベースセッション
         *         current_user: 現在の認証済みユーザー
         *
         *     Returns:
         *         プロジェクト詳細情報
         *
         *     Raises:
         *         HTTPException: プロジェクトが見つからない、または取得に失敗した場合
         */
        get: operations["get_project_detail_api_v1_projects__project_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/projects/{project_id}/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Project Metrics
         * @description プロジェクトのメトリクスを取得します
         *
         *     このエンドポイントは、プロジェクトの生産性メトリクスを返します。
         *     結果は3分間キャッシュされ、データベースへの負荷を軽減します。
         *
         *     Args:
         *         project_id: プロジェクトID
         *         period: 期間（week, month, quarter）
         *         db: データベースセッション
         *         current_user: 現在の認証済みユーザー
         *
         *     Returns:
         *         プロジェクトメトリクス
         *
         *     Raises:
         *         HTTPException: メトリクス取得に失敗した場合
         */
        get: operations["get_project_metrics_api_v1_projects__project_id__metrics_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/projects/{project_id}/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh Project Cache
         * @description プロジェクト関連のキャッシュを無効化します
         *
         *     このエンドポイントは、プロジェクト関連のキャッシュを無効化し、
         *     次回のリクエストで最新のデータを取得できるようにします。
         *
         *     Args:
         *         project_id: プロジェクトID
         *         db: データベースセッション
         *         current_user: 現在の認証済みユーザー
         *
         *     Returns:
         *         キャッシュ無効化結果
         */
        post: operations["refresh_project_cache_api_v1_projects__project_id__refresh_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/test/cache/simple": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Test Simple Cache
         * @description シンプルなキャッシュテスト
         *
         *     このエンドポイントは、基本的なキャッシュ機能をテストします。
         *     1分間キャッシュされ、2回目のリクエストからは高速で応答します。
         */
        get: operations["test_simple_cache_api_v1_test_cache_simple_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/test/cache/parameter/{param_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Test Parameter Cache
         * @description パラメータ付きキャッシュテスト
         *
         *     このエンドポイントは、パラメータに基づくキャッシュ機能をテストします。
         *     各パラメータ値に対して個別にキャッシュされます。
         */
        get: operations["test_parameter_cache_api_v1_test_cache_parameter__param_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/test/cache/query": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Test Query Cache
         * @description クエリパラメータ付きキャッシュテスト
         *
         *     このエンドポイントは、クエリパラメータに基づくキャッシュ機能をテストします。
         *     クエリパラメータの組み合わせごとに個別にキャッシュされます。
         */
        get: operations["test_query_cache_api_v1_test_cache_query_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/test/cache/performance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Test Performance Cache
         * @description パフォーマンステスト用キャッシュ
         *
         *     このエンドポイントは、キャッシュのパフォーマンス効果を測定するためのテストです。
         *     重い処理をシミュレートして、キャッシュの効果を明確に示します。
         */
        get: operations["test_performance_cache_api_v1_test_cache_performance_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/test/cache/invalidate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Test Cache Invalidation
         * @description キャッシュ無効化テスト
         *
         *     このエンドポイントは、キャッシュ無効化機能をテストします。
         *     実行後、test_で始まる全てのキャッシュが無効化されます。
         */
        post: operations["test_cache_invalidation_api_v1_test_cache_invalidate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/test/cache/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Test Cache Stats
         * @description キャッシュ統計テスト
         *
         *     このエンドポイントは、キャッシュの統計情報を返します。
         *     認証不要でアクセス可能です。
         */
        get: operations["test_cache_stats_api_v1_test_cache_stats_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Root */
        get: operations["root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check
         * @description アプリケーションの健全性チェック
         *
         *     このエンドポイントは、アプリケーション全体の健全性を確認します。
         */
        get: operations["health_check_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * AuthorizationResponse
         * @description 認証URL生成のレスポンススキーマ
         * @example {
         *       "authorization_url": "https://example.backlog.jp/OAuth2AccessRequest.action?response_type=code&client_id=xxx&redirect_uri=xxx&state=xxx",
         *       "state": "random_state_string"
         *     }
         */
        AuthorizationResponse: {
            /**
             * Authorization Url
             * @description Backlogの認証URL
             */
            authorization_url: string;
            /**
             * State
             * @description CSRF対策用のランダムな文字列
             */
            state: string;
        };
        /**
         * CallbackRequest
         * @description OAuth2.0コールバックのリクエストスキーマ
         * @example {
         *       "code": "authorization_code_from_backlog",
         *       "state": "random_state_string"
         *     }
         */
        CallbackRequest: {
            /**
             * Code
             * @description Backlogから受け取った認証コード
             */
            code: string;
            /**
             * State
             * @description 認証開始時に生成したstate
             */
            state: string;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * HealthResponse
         * @description ヘルスチェックのレスポンス
         * @example {
         *       "message": "Team Insight API is running",
         *       "services": {
         *         "api": "healthy",
         *         "database": "healthy",
         *         "redis": "healthy"
         *       },
         *       "status": "healthy",
         *       "timestamp": "2024-01-01T00:00:00Z"
         *     }
         */
        HealthResponse: {
            /**
             * Status
             * @description システム全体の健全性ステータス
             * @enum {string}
             */
            status: "healthy" | "unhealthy";
            services: components["schemas"]["ServiceStatus"];
            /**
             * Message
             * @description ステータスメッセージ
             * @example Team Insight API is running
             */
            message: string;
            /**
             * Timestamp
             * Format: date-time
             * @description チェック実行時刻
             */
            timestamp: string;
        };
        /**
         * ServiceStatus
         * @description 各サービスの健全性ステータス
         */
        ServiceStatus: {
            /**
             * Api
             * @description APIサーバーの状態
             * @enum {string}
             */
            api: "healthy" | "unhealthy";
            /**
             * Database
             * @description データベースの状態
             * @enum {string}
             */
            database: "healthy" | "unhealthy";
            /**
             * Redis
             * @description Redisキャッシュの状態
             * @enum {string}
             */
            redis: "healthy" | "unhealthy";
        };
        /**
         * TokenResponse
         * @description トークンレスポンススキーマ
         * @example {
         *       "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
         *       "token_type": "bearer",
         *       "user": {
         *         "backlog_id": 12345,
         *         "email": "user@example.com",
         *         "id": 1,
         *         "name": "山田太郎",
         *         "user_id": "yamada"
         *       }
         *     }
         */
        TokenResponse: {
            /**
             * Access Token
             * @description アプリケーション用のJWTアクセストークン
             */
            access_token: string;
            /**
             * Token Type
             * @description トークンタイプ
             * @default bearer
             */
            token_type: string;
            /** @description ユーザー情報 */
            user: components["schemas"]["UserInfoResponse"];
        };
        /**
         * UserInfoResponse
         * @description ユーザー情報のレスポンススキーマ
         * @example {
         *       "backlog_id": 12345,
         *       "email": "user@example.com",
         *       "id": 1,
         *       "name": "山田太郎",
         *       "user_id": "yamada"
         *     }
         */
        UserInfoResponse: {
            /**
             * Id
             * @description 内部ユーザーID
             */
            id: number;
            /**
             * Backlog Id
             * @description BacklogのユーザーID
             */
            backlog_id: number;
            /**
             * Email
             * @description メールアドレス
             */
            email?: string | null;
            /**
             * Name
             * @description ユーザー名
             */
            name: string;
            /**
             * User Id
             * @description BacklogのユーザーID（文字列）
             */
            user_id: string;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_authorization_url_api_v1_auth_backlog_authorize_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthorizationResponse"];
                };
            };
        };
    };
    handle_callback_api_v1_auth_backlog_callback_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CallbackRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    refresh_token_api_v1_auth_backlog_refresh_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenResponse"];
                };
            };
        };
    };
    verify_token_api_v1_auth_verify_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserInfoResponse"];
                };
            };
        };
    };
    get_current_user_info_api_v1_auth_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserInfoResponse"];
                };
            };
        };
    };
    get_cache_statistics_api_v1_cache_stats_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    clear_all_cache_api_v1_cache_clear_delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    clear_cache_by_pattern_api_v1_cache_clear__pattern__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                pattern: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    cache_health_check_api_v1_cache_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    get_projects_api_v1_projects__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    get_project_detail_api_v1_projects__project_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_project_metrics_api_v1_projects__project_id__metrics_get: {
        parameters: {
            query?: {
                period?: string;
            };
            header?: never;
            path: {
                project_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    refresh_project_cache_api_v1_projects__project_id__refresh_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    test_simple_cache_api_v1_test_cache_simple_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    test_parameter_cache_api_v1_test_cache_parameter__param_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                param_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    test_query_cache_api_v1_test_cache_query_get: {
        parameters: {
            query?: {
                page?: number;
                limit?: number;
                sort?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    test_performance_cache_api_v1_test_cache_performance_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    test_cache_invalidation_api_v1_test_cache_invalidate_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    test_cache_stats_api_v1_test_cache_stats_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    health_check_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthResponse"];
                };
            };
        };
    };
}
