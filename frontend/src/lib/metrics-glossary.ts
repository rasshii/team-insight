/**
 * メトリクス用語集
 * 各ダッシュボードで使用される専門用語の説明を定義
 */

export const metricsGlossary = {
  // 効率性関連
  efficiencyScore: {
    term: '効率性スコア',
    description: `タスクを完了するまでの速さを0-100で評価した総合指標です。

【計算方法】
基本スコア = 100 / (平均完了日数 + 1)
• 1日で完了: 50点
• 2日で完了: 33点
• 3日で完了: 25点

【評価要素】
1. タスク完了速度: 着手から完了までの実作業日数
2. 複雑度調整: タスクタイプ（バグ修正、機能開発など）による重み付け
3. 品質係数: 手戻り率が低いほど高評価

【スコアの目安】
• 80点以上: 非常に効率的（上位10%）
• 60-79点: 効率的（標準以上）
• 40-59点: 標準的
• 40点未満: 改善の余地あり`,
    example: '活用例: チーム平均が60点の場合、70点以上のメンバーは高パフォーマーとして評価'
  },
  
  // 生産性関連
  throughput: {
    term: 'スループット',
    description: '一定期間内に完了したタスクの数。チームや個人の処理能力を示す指標です。',
    example: '例: 今週のスループット = 15タスク'
  },
  
  velocity: {
    term: 'ベロシティ',
    description: 'スプリント（開発期間）内で完了したストーリーポイントの合計。チームの作業速度を示します。',
    example: '例: 2週間のスプリントで30ポイント完了'
  },
  
  cycleTime: {
    term: 'サイクルタイム',
    description: 'タスクが「開始」から「完了」までにかかった実際の時間。待機時間を除いた実作業時間です。',
    example: '例: 着手から完了まで3営業日'
  },
  
  leadTime: {
    term: 'リードタイム',
    description: 'タスクが「作成」から「完了」までにかかった全体の時間。待機時間も含みます。',
    example: '例: 課題登録から完了まで5営業日'
  },
  
  // ワークフロー関連
  workflowAnalysis: {
    term: 'ワークフロー分析',
    description: 'タスクがどのステータスでどれくらい時間を費やしているかを分析。ボトルネックの特定に役立ちます。',
    example: '例: レビュー待ちで平均2日停滞'
  },
  
  bottleneck: {
    term: 'ボトルネック',
    description: '作業の流れを妨げている箇所。タスクが滞留しやすいステータスや工程を指します。',
    example: '例: コードレビューで3日以上待機'
  },
  
  // トレンド関連
  productivityTrend: {
    term: '生産性推移',
    description: '時系列での生産性の変化。完了タスク数、効率性、品質などの複合的な指標の推移を示します。',
    example: '例: 先月比で完了タスク数が20%向上'
  },
  
  performanceTrend: {
    term: 'パフォーマンストレンド',
    description: '個人やチームの成果の時系列変化。上昇、下降、安定の3つの傾向で表現されます。',
    example: '例: 過去3ヶ月で上昇傾向'
  },
  
  // チーム関連
  taskDistribution: {
    term: 'タスク分配',
    description: 'チームメンバー間でのタスクの割り振り状況。負荷の偏りを可視化します。',
    example: '例: Aさん30%、Bさん25%、Cさん45%'
  },
  
  teamCapacity: {
    term: 'チームキャパシティ',
    description: 'チームが一定期間内に処理できる作業量の上限。メンバー数と個人の生産性から算出されます。',
    example: '例: 1スプリントで最大50ポイント処理可能'
  },
  
  // 品質関連
  defectRate: {
    term: '欠陥率',
    description: '完了したタスクのうち、バグや不具合が発見された割合。品質の指標となります。',
    example: '例: 100タスク中5タスクに不具合 = 5%'
  },
  
  reworkRate: {
    term: '手戻り率',
    description: '一度完了したタスクが再度作業が必要になった割合。プロセスの改善点を示唆します。',
    example: '例: 完了後に20%が要修正'
  },
  
  // その他の指標
  burndownChart: {
    term: 'バーンダウンチャート',
    description: 'スプリント期間中の残作業量の推移を示すグラフ。計画と実績の乖離を可視化します。',
    example: '例: 理想線より下回れば順調'
  },
  
  utilizationRate: {
    term: '稼働率',
    description: '利用可能な時間のうち、実際に作業に費やした時間の割合。リソースの活用度を示します。',
    example: '例: 8時間中6時間作業 = 75%'
  },

  // 個人ダッシュボード関連
  averageCompletionTime: {
    term: '平均処理時間',
    description: 'タスクを完了するまでにかかる平均的な時間。個人の作業効率を測る基本的な指標です。',
    example: '例: 平均3日でタスク完了'
  },

  completionRate: {
    term: '完了率',
    description: 'アサインされた全タスクのうち、完了したタスクの割合。進捗管理の基本指標です。',
    example: '例: 10タスク中8タスク完了 = 80%'
  },

  taskTypeEfficiency: {
    term: 'タスクタイプ別効率',
    description: '機能開発、バグ修正、改善など、タスクの種類ごとの処理効率。得意分野の把握に役立ちます。',
    example: '例: バグ修正は平均1日、機能開発は平均3日'
  },

  // プロジェクトダッシュボード関連
  healthScore: {
    term: '健康度スコア',
    description: 'プロジェクトの健全性を0-100で評価した総合指標。完了率、期限遵守率、ボトルネックの有無などから算出されます。',
    example: '例: 80以上=健全、60-79=注意、60未満=要改善'
  },

  overdueRate: {
    term: '期限遵守率',
    description: '全タスクのうち、期限内に完了したタスクの割合。プロジェクトの計画通りの進行度を示します。',
    example: '例: 期限遵守率95% = 20タスク中19タスクが期限内'
  },

  statusDistribution: {
    term: 'ステータス分布',
    description: '各ステータス（未着手、進行中、完了など）のタスク数の内訳。作業の進捗バランスを可視化します。',
    example: '例: 未着手20%、進行中50%、完了30%'
  },

  // チーム生産性ダッシュボード関連
  teamProductivity: {
    term: '平均生産性',
    description: 'チームが一定期間（通常は月単位）で完了するタスクの平均数。チーム間の比較や時系列での改善を測定します。',
    example: '例: 15タスク/チーム/月'
  },

  memberPerformance: {
    term: 'メンバー別パフォーマンス',
    description: '各チームメンバーの個人的な生産性指標。完了タスク数、効率性、品質などを総合的に評価します。',
    example: '例: Aさん20タスク/月、効率性90%'
  },

  activityTimeline: {
    term: 'アクティビティタイムライン',
    description: 'チームの活動履歴を時系列で表示。タスクの作成、更新、完了などの重要なイベントを追跡します。',
    example: '例: 10:00 タスク作成、14:30 レビュー完了'
  },

  // 基本指標
  activeTasks: {
    term: 'アクティブタスク',
    description: `現在進行中で作業が必要なタスクの総数です。

【含まれるタスク】
• 進行中: 実際に作業が開始されたタスク
• 処理中: レビューや確認待ちのタスク
• 対応中: 問題解決やフィードバック対応中のタスク
• 未着手（期限内）: アサインされたが未開始のタスク

【含まれないタスク】
• 完了済みタスク
• クローズされたタスク
• 保留中のタスク
• 期限切れで放置されたタスク

【活用方法】
1. 個人の負荷確認: 5-10個が適正範囲
2. チームの稼働状況: メンバー数×5-10が目安
3. ボトルネック検出: 特定メンバーに偏っていないか確認

【注意点】
アクティブタスクが多すぎると:
• コンテキストスイッチが増加
• 各タスクの品質が低下
• 完了までの時間が延長`,
    example: '推奨: 個人は5-10個、チーム全体はメンバー数×5-10個を維持'
  },

  // ロール関連
  globalRole: {
    term: 'グローバルロール',
    description: `Team Insight全体で有効な権限ロールです。

【特徴】
• すべてのプロジェクトで共通の権限
• システム全体に影響する機能へのアクセス制御
• ユーザー管理やシステム設定などの管理機能

【ロールの種類】
1. ADMIN（管理者）
   - すべての機能にアクセス可能
   - ユーザー管理、システム設定の変更
   - プロジェクトの作成・削除

2. PROJECT_LEADER（プロジェクトリーダー）
   - 複数プロジェクトの管理
   - チーム管理機能へのアクセス
   - レポート機能の利用

3. MEMBER（メンバー）
   - 基本的な閲覧権限
   - 個人ダッシュボードの利用
   - アサインされたタスクの管理

【注意点】
グローバルロールは組織全体の権限管理に使用されます。
プロジェクト固有の権限が必要な場合は、プロジェクトロールを使用してください。`,
    example: '例: 部門長にPROJECT_LEADER、一般社員にMEMBERを割り当て'
  },

  projectRole: {
    term: 'プロジェクトロール',
    description: `特定のプロジェクト内でのみ有効な権限ロールです。

【特徴】
• 指定されたプロジェクト内でのみ有効
• プロジェクトごとに異なる役割を持つことが可能
• より細かい権限制御が可能

【使用例】
• Aプロジェクト: PROJECT_LEADER（リーダー権限）
• Bプロジェクト: MEMBER（メンバー権限）
• Cプロジェクト: アクセス権限なし

【メリット】
1. 柔軟な権限管理
   - プロジェクトごとに役割を変更可能
   - 必要最小限の権限付与

2. セキュリティ向上
   - プロジェクト間の情報分離
   - 機密プロジェクトへのアクセス制限

3. 責任の明確化
   - プロジェクトごとの責任者を明確に
   - 役割に応じた作業分担

【グローバルロールとの関係】
プロジェクトロールはグローバルロールを上書きしません。
より高い権限が優先されます。`,
    example: '例: 開発プロジェクトでリーダー、保守プロジェクトでメンバー'
  }
} as const

export type MetricKey = keyof typeof metricsGlossary