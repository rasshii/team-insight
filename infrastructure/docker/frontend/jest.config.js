// ==============================================================================
// Mine-CMS フロントエンド Jest設定ファイル
// ==============================================================================
// このファイルは、JavaScriptのテスティングフレームワークであるJestの設定を定義します。
// Jestは、React/Next.jsアプリケーションのユニットテストや統合テストを実行するために使用されます。
//
// 主な設定内容:
// - テスト環境の設定（jsdom）
// - モジュールパスの解決
// - ファイル変換の設定
// - カバレッジ収集の設定
// - モックの設定
// ==============================================================================

const nextJest = require("next/jest");

// Next.jsアプリケーション用のJest設定を作成
// これにより、Next.jsの設定（next.config.js、.env）が自動的に読み込まれます
const createJestConfig = nextJest({
  // Next.jsアプリケーションのルートディレクトリを指定
  dir: "./",
});

// カスタムJest設定
const customJestConfig = {
  // ==============================================================================
  // テスト環境の設定
  // ==============================================================================
  // jsdomを使用してブラウザ環境をシミュレート
  // これにより、React コンポーネントのテストが可能になります
  testEnvironment: "jest-environment-jsdom",

  // ==============================================================================
  // セットアップファイル
  // ==============================================================================
  // 各テストファイルの実行前に一度だけ実行されるファイル
  setupFilesAfterEnv: ["<rootDir>/jest.setup.js"],

  // ==============================================================================
  // モジュール名のマッピング
  // ==============================================================================
  // TypeScriptのパスエイリアスをJestで解決できるようにする設定
  moduleNameMapper: {
    // srcディレクトリ内のモジュールを@/でインポートできるようにする
    "^@/(.*)$": "<rootDir>/src/$1",

    // 各種ディレクトリのエイリアス
    "^@/components/(.*)$": "<rootDir>/src/components/$1",
    "^@/lib/(.*)$": "<rootDir>/src/lib/$1",
    "^@/hooks/(.*)$": "<rootDir>/src/hooks/$1",
    "^@/types/(.*)$": "<rootDir>/src/types/$1",
    "^@/styles/(.*)$": "<rootDir>/src/styles/$1",
    "^@/utils/(.*)$": "<rootDir>/src/utils/$1",

    // CSSモジュールのモック
    // テスト時にCSSファイルを読み込むとエラーになるため、モックで置き換える
    "\\.(css|less|scss|sass)$": "identity-obj-proxy",

    // 画像ファイルのモック
    "\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$":
      "<rootDir>/__mocks__/fileMock.js",
  },

  // ==============================================================================
  // テストパスのパターン
  // ==============================================================================
  // どのファイルをテストとして実行するかを指定
  testMatch: [
    "**/__tests__/**/*.(ts|tsx|js|jsx)",
    "**/*.(test|spec).(ts|tsx|js|jsx)",
  ],

  // テストから除外するパスのパターン
  testPathIgnorePatterns: [
    "<rootDir>/.next/",
    "<rootDir>/node_modules/",
    "<rootDir>/coverage/",
    "<rootDir>/dist/",
  ],

  // ==============================================================================
  // 変換設定
  // ==============================================================================
  // どのファイルをどのように変換するかを指定
  transform: {
    // TypeScript/JavaScript ファイルの変換は next/jest が処理
    "^.+\\.(js|jsx|ts|tsx)$": [
      "next/jest",
      {
        // babel-jest の設定
        babel: true,
      },
    ],
  },

  // 変換から除外するパターン
  transformIgnorePatterns: [
    "/node_modules/",
    "^.+\\.module\\.(css|sass|scss)$",
  ],

  // ==============================================================================
  // カバレッジ（コードカバレッジ）の設定
  // ==============================================================================
  // カバレッジを収集するファイルのパターン
  collectCoverageFrom: [
    "src/**/*.{js,jsx,ts,tsx}",
    // ストーリーファイルは除外
    "!src/**/*.stories.{js,jsx,ts,tsx}",
    // 型定義ファイルは除外
    "!src/**/*.d.ts",
    // テストファイル自体は除外
    "!src/**/__tests__/**",
    // モックファイルは除外
    "!src/**/__mocks__/**",
    // Next.jsの特殊ファイルは除外
    "!src/pages/_app.tsx",
    "!src/pages/_document.tsx",
    "!src/app/layout.tsx",
  ],

  // カバレッジレポートの形式
  coverageReporters: [
    "text", // コンソールに表示
    "lcov", // 詳細なHTMLレポート
    "html", // ブラウザで見れるHTMLレポート
    "cobertura", // CI/CD連携用
  ],

  // カバレッジの閾値（これを下回るとテストが失敗する）
  coverageThreshold: {
    global: {
      branches: 70, // 分岐網羅率 70%以上
      functions: 70, // 関数網羅率 70%以上
      lines: 70, // 行網羅率 70%以上
      statements: 70, // ステートメント網羅率 70%以上
    },
  },

  // ==============================================================================
  // グローバル設定
  // ==============================================================================
  globals: {
    // TypeScriptの設定
    "ts-jest": {
      tsconfig: {
        jsx: "react",
      },
    },
  },

  // ==============================================================================
  // モジュールのファイル拡張子
  // ==============================================================================
  moduleFileExtensions: ["ts", "tsx", "js", "jsx", "json"],

  // ==============================================================================
  // ウォッチモードの設定
  // ==============================================================================
  watchPlugins: [
    "jest-watch-typeahead/filename",
    "jest-watch-typeahead/testname",
  ],

  // ==============================================================================
  // その他の設定
  // ==============================================================================
  // テストタイムアウト（ミリ秒）
  testTimeout: 10000,

  // 詳細なエラースタックトレースを表示
  verbose: true,

  // テスト実行時にコンソールをクリア
  clearMocks: true,

  // フェイクタイマーの設定
  fakeTimers: {
    enableGlobally: false,
  },
};

// createJestConfigは非同期関数なので、Next.jsの設定を読み込むために必要
module.exports = createJestConfig(customJestConfig);
