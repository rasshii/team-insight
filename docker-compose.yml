version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    build:
      context: ./infrastructure/docker/postgresql
      dockerfile: Dockerfile
    container_name: team-insight-postgres
    environment:
      POSTGRES_USER: team_insight_user
      POSTGRES_PASSWORD: team_insight_password
      POSTGRES_DB: team_insight
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/docker/postgresql/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./infrastructure/docker/postgresql/conf/postgresql.conf:/etc/postgresql/postgresql.conf
    networks:
      - team-insight-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U team_insight_user -d team_insight"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    build:
      context: ./infrastructure/docker/redis
      dockerfile: Dockerfile
    container_name: team-insight-redis
    environment:
      REDIS_PASSWORD: team_insight_redis_password
      REDISCLI_AUTH: team_insight_redis_password
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass team_insight_redis_password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./infrastructure/docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - team-insight-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "team_insight_redis_password", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # MailHog - Email Testing Tool
  mailhog:
    image: mailhog/mailhog:latest
    container_name: team-insight-mailhog
    ports:
      - "1025:1025"  # SMTP server
      - "8025:8025"  # Web UI
    networks:
      - team-insight-network
    restart: unless-stopped

  # Backend API (FastAPI)
  backend:
    build:
      context: ./backend
      dockerfile: ../infrastructure/docker/backend/Dockerfile
    container_name: team-insight-backend
    env_file:
      - ./backend/.env
    environment:
      DATABASE_URL: postgresql://team_insight_user:team_insight_password@postgres:5432/team_insight
      REDIS_URL: redis://:team_insight_redis_password@redis:6379/0
      REDISCLI_AUTH: team_insight_redis_password
      PYTHONPATH: /app
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-here}
      DEBUG: ${DEBUG:-True}
      BACKEND_CORS_ORIGINS: http://localhost,http://frontend:3000
      LOG_LEVEL: DEBUG
      # MailHog settings for development
      SMTP_HOST: ${SMTP_HOST:-mailhog}
      SMTP_PORT: ${SMTP_PORT:-1025}
      SMTP_USER: ${SMTP_USER:-}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-}
      SMTP_TLS: ${SMTP_TLS:-false}
      SMTP_SSL: ${SMTP_SSL:-false}
      SMTP_FROM_EMAIL: ${SMTP_FROM_EMAIL:-noreply@teaminsight.dev}
      SMTP_FROM_NAME: ${SMTP_FROM_NAME:-Team Insight}
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - backend_cache:/root/.cache
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mailhog:
        condition: service_started
    networks:
      - team-insight-network
    command: /bin/bash scripts/startup.sh
    restart: unless-stopped

  # Frontend Application (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: ../infrastructure/docker/frontend/Dockerfile.dev
    container_name: team-insight-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost
      NEXT_PUBLIC_APP_URL: http://localhost
      NEXT_PUBLIC_API_BASE_URL: http://localhost
      NODE_ENV: development
      NEXT_TELEMETRY_DISABLED: 1
      PORT: 3000
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.yarn/cache
      - /app/.next
    depends_on:
      - backend
    networks:
      - team-insight-network
    command: yarn dev
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    build:
      context: ./infrastructure/docker/nginx
      dockerfile: Dockerfile
    container_name: team-insight-nginx
    ports:
      - "80:80"
    volumes:
      - ./infrastructure/docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - team-insight-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_cache:
    driver: local

networks:
  team-insight-network:
    driver: bridge
