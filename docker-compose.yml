version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    build:
      context: ./infrastructure/docker/postgresql
      dockerfile: Dockerfile
    container_name: team-insight-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: team_insight
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/docker/postgresql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - team-insight-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    build:
      context: ./infrastructure/docker/redis
      dockerfile: Dockerfile
    container_name: team-insight-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - team-insight-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API (FastAPI)
  backend:
    build:
      context: ./backend
      dockerfile: ../infrastructure/docker/backend/Dockerfile
    container_name: team-insight-backend
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/team_insight
      REDIS_URL: redis://redis:6379
      PYTHONPATH: /app
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-here}
      DEBUG: ${DEBUG:-True}
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - backend_cache:/root/.cache
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - team-insight-network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend Application (React)
  frontend:
    build:
      context: ./frontend
      dockerfile: ../infrastructure/docker/frontend/Dockerfile
    container_name: team-insight-frontend
    environment:
      REACT_APP_API_URL: http://localhost:8000
      REACT_APP_ENVIRONMENT: development
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - team-insight-network
    command: yarn start

  # Nginx Reverse Proxy
  nginx:
    build:
      context: ./infrastructure/docker/nginx
      dockerfile: Dockerfile
    container_name: team-insight-nginx
    ports:
      - "80:80"
    volumes:
      - ./infrastructure/docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - team-insight-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_cache:
    driver: local

networks:
  team-insight-network:
    driver: bridge
